#!/usr/bin/env ruby

require 'getoptlong'
require 'rdf-config'

def help
  puts DATA.read
  exit
end

opts = {
  :config_dir => nil,
  :mode => nil,
}

args = GetoptLong.new(
  [ '--config',   '-c',  GetoptLong::REQUIRED_ARGUMENT ],
  [ '--help',     '-h',  GetoptLong::NO_ARGUMENT ],
  [ '--senbero',         GetoptLong::NO_ARGUMENT ],
  [ '--schema',          GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--sparql',          GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--query',           GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--sparqlist',       GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--grasp',           GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--stanza',          GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--stanza_rb',       GetoptLong::OPTIONAL_ARGUMENT ],
)

args.each_option do |name, value|
  case name
  when /--config/
    opts[:config_dir] = value
  when /--senbero/
    opts[:mode] = :senbero
  when /--schema/
    opts[:mode] = :chart
  when /--sparqlist/
    opts[:mode] = :sparqlist
  when /--sparql/
    opts[:mode] = :sparql
    opts[:sparql_query_name] = value
  when /--query/
    # pipe to https://gist.github.com/ktym/3385134 ?
    opts[:mode] = :query
  when /--grasp/
    opts[:mode] = :grasp
  when /--stanza_rb/
    opts[:mode] = :stanza_rb
    opts[:stanza_name] = value
  when /--stanza/
    opts[:mode] = :stanza_js
    opts[:stanza_name] = value
  end
end

if opts[:config_dir] and opts[:mode]
  rdf_config = RDFConfig.new(opts)
  rdf_config.exec(opts)
else
  help
end

__END__
NAME
    rdf-config -- RDF model to SPARQL, Schema, Stanza converter

SYNOPSIS
    rdf-config --help
    rdf-config --config path/to/config/name --sparql     [queryname]
    rdf-config --config path/to/config/name --schema
    rdf-config --config path/to/config/name --senbero
    rdf-config --config path/to/config/name --stanza     [stanzaname]
    rdf-config --config path/to/config/name --stanza_rb  [stanzaname]

DESCRIPTION

    Read a RDF data model from config/name/ directory
    then generate SPARQL query, exec SPARQL query,
    generate Schema chart, and generate Stanza.

    Configuration files of a RDF model are written
    in the YAML format.

    * config/name/model.yaml: RDF deta model structure and variable names
    * config/name/endpoint.yaml: SPARQL endpoint
    * config/name/prefix.yaml: URI prefixes
    * config/name/sparql.yaml: SPARQL definition
    * config/name/stanza.yaml: TogoStanza definition
    * config/name/grasp.yaml: GraphQL definition
    * config/name/metadata.yaml: Metadata compatible with NBRC RDF portal
    * config/name/metadata_ja.yaml: Japanese version of Metadata

